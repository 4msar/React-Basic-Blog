{"version":3,"sources":["components/Post/Post.module.css","helpers/axios.js","components/Post/Posts.js","components/CreatePost/CreatePost.js","components/Details/Details.js","containers/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","timeout","Posts","props","state","posts","this","length","setState","map","item","classes","push","style","PostItem","className","join","key","id","src","image","alt","title","onClick","e","clicked","details","slice","React","Component","CreatePost","inputs","event","name","target","value","preventDefault","console","log","post","then","response","created","data","onSubmit","formSubmitHandler","bind","htmlFor","type","placeholder","required","onChange","inputChangeHandler","rows","defaultValue","Details","get","createdAt","Main","active","selected","prevState","prevProps","isNewPostCreated","postClickHandler","backButtonClickHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7079cd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostItem\":\"Post_PostItem__bGyyf\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://5dfa5e8538678a00145fa1ae.mockapi.io/app/',\r\n  timeout: 50000,\r\n  // headers: {'X-Custom-Header': 'foobar'}\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport style from './Post.module.css';\r\n\r\nexport default class Posts extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tposts: this.props.posts\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(state, props){\r\n\t\tif( state.posts && this.props.posts.length !== props.posts.length ){\r\n\t\t\tthis.setState({ posts: this.props.posts });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.posts.map(item=>{\r\n\t\t\t\t\tlet classes = ['media'];\r\n\t\t\t\t\t\tclasses.push(style.PostItem);\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className={classes.join(' ')} key={item.id}>\r\n\t\t\t\t\t\t\t<img src={item.image} className=\"mr-3 img-thumbnail\" alt={item.title} />\r\n\t\t\t\t\t\t\t<div className=\"media-body\">\r\n\t\t\t\t\t\t\t\t<h5 onClick={(e)=>this.props.clicked(item.id)} className=\"mt-0\">{item.title}</h5>\r\n\t\t\t\t\t\t\t\t{item.details.slice(0, 100)}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport axios from '../../helpers/axios';\r\n\r\nexport default class CreatePost extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tinputs: {\r\n\t\t\t\ttitle: \"\",\r\n\t\t\t\tdetails: \"\",\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tinputChangeHandler(event, name){\r\n\t\tconst inputs = this.state.inputs;\r\n\t\tinputs[name] = event.target.value;\r\n\t\tthis.setState({ inputs: inputs });\r\n\t}\r\n\tformSubmitHandler(e){\r\n\t\te.preventDefault();\r\n\t\tconsole.log(this.state.inputs);\r\n\t\taxios.post('/blogs', this.state.inputs).then(response=>{\r\n\t\t\tconsole.log(response);\r\n\t\t\tthis.props.created(response.data);\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.formSubmitHandler.bind(this)}>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"title\">Post Title</label>\r\n\t\t\t\t\t\t<input \r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tclassName=\"form-control\" \r\n\t\t\t\t\t\t\tid=\"title\" \r\n\t\t\t\t\t\t\tplaceholder=\"Title....\"\r\n\t\t\t\t\t\t\tvalue={this.state.inputs.title}\r\n\t\t\t\t\t\t\trequired={true}\r\n\t\t\t\t\t\t\tonChange={(e)=>this.inputChangeHandler(e, 'title')} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<label htmlFor=\"details\">Post Details</label>\r\n\t\t\t\t\t\t<textarea \r\n\t\t\t\t\t\t\tonChange={(e)=>this.inputChangeHandler(e, 'details')}\r\n\t\t\t\t\t\t\tclassName=\"form-control\" \r\n\t\t\t\t\t\t\tid=\"details\" rows=\"3\"\r\n\t\t\t\t\t\t\tdefaultValue={this.state.inputs.details}\r\n\t\t\t\t\t\t\tplaceholder=\"Write something...\"></textarea>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport axios from '../../helpers/axios';\r\n\r\nexport default class Details extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tpost: null\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate(){\r\n\t\treturn this.state.post ? this.props.post !== this.state.post.id : true;\r\n\t}\r\n\tcomponentDidUpdate(state, props){\t\t\r\n\t\taxios.get('/blogs/'+this.props.post).then(response=>{\r\n\t\t\tthis.setState({ post: response.data });\r\n\t\t});\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\taxios.get('/blogs/'+this.props.post).then(response=>{\r\n\t\t\tthis.setState({ post: response.data });\r\n\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.post ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h1>{this.state.post.title}</h1>\r\n\t\t\t\t\t\t<h6>{this.state.post.createdAt}</h6>\r\n\t\t\t\t\t\t<div>{this.state.post.details}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t): null}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport axios from '../helpers/axios';\r\n\r\nimport Posts from '../components/Post/Posts';\r\nimport CreatePost from '../components/CreatePost/CreatePost';\r\nimport Details from '../components/Details/Details';\r\n\r\nexport default class Main extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tactive: 'success',\r\n\t\t\tposts: [],\r\n\t\t\tselected: null\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidUpdate(prevState, prevProps){\r\n\t\tconsole.log(prevProps, prevState);\r\n\t\tconsole.log('[Main] updated');\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconsole.log('[Main] mounted');\r\n\r\n\t\taxios.get('/blogs').then(response=>{\r\n\t\t\tthis.setState({ posts: response.data });\r\n\t\t});\r\n\t}\r\n\r\n\tpostClickHandler(item){\r\n\t\tthis.setState({ selected: item });\r\n\t}\r\n\tbackButtonClickHandler(item){\r\n\t\tthis.setState({ selected: null });\r\n\t}\r\n\tisNewPostCreated(item){\r\n\t\tif( item ){\r\n\t\t\tconst posts = this.state.posts;\r\n\t\t\tposts.push(item);\r\n\t\t\tthis.setState({ posts: posts });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('[Main] rendered');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<CreatePost\r\n\t\t\t\t\tcreated={this.isNewPostCreated.bind(this)} />\r\n\t\t\t\t<hr />\r\n\t\t\t\t\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h2>All Posts</h2>\r\n\t\t\t\t\t\t<Posts\r\n\t\t\t\t\t\t\tclicked={this.postClickHandler.bind(this)}\r\n\t\t\t\t\t\t\tposts={this.state.posts} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t{this.state.selected ? (<div>\r\n\t\t\t\t\t\t\t<button className=\"btn btn-warning btn-sm\" onClick={this.backButtonClickHandler.bind(this)}>Close</button>\r\n\t\t\t\t\t\t\t<Details \r\n\t\t\t\t\t\t\t\tpost={this.state.selected}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>):null}\r\n\t\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\t","import React from 'react';\r\nimport Main from './Main';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container \">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <Main />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}